https://gmlwjd9405.github.io/2018/09/21/rest-and-restful.html

rest는 서버는 클라이언트의 상태를 저장해서는 안된다. 즉, 클라이언트의 요청만을 단순 처리하는 거이고 이전 요청이 다음 요청의 처리에 연관되어서는 안된다.
    -> 매번 요청이 올 때 마다 새로운 요청 상대로 봐야 한다.
=> 세션을 쓰면 안된다. / 세션에 클라이언트의 개인정보가 저장되어 로그인을 유지시켜주는 것이 세션 >> rest api는 그러면 안됨 > 세션을 닫아야함. > res api의 무상태성
구글과같은 많은 사용자들이 로그인하는 서버에서 사용자마다 사용자의 로그인 정보를 담으면 서버가 상당히 무거워짐
세션을 안쓰는 것이지 DB를 쓰지 않는것이 아니므로 이전 요청이 DB를 수정하여 DB에 의해 바뀌는 것은 가능함

서버로부터 스크립트를 받아서 클라이언트에서 실행한다 > ssr

restful한 서버는 실질적으로 없고 최대한 특징을 지켜서 만듬

* rest api 설계 기본 규칙
    1. 자원에 대한 행위는 HTTP Method(GET, PUT, POST, DELETE 등)로 표현한다
        > GET /members/delete/1 >> DELETE /members/1
    2. URI에 행위에 대한 동사 표현이 들어가면 안된다.(즉, CRUD 기능을 나타내는 것은 URI에 사용하지 않는다.) / 명사나 형용사로 사용
        > GET /members/show/1 >> GET /members/1
        > GET /members/insert/2 >> POST /members/2
    3. 경로 부분 중 변하는 부분은 유일한 값(키 값)으로 대체한다.(즉, :id는 하나의 특정 resource를 나타내는 고유값이다.)
        > student를 생성하는 route: POST /students
        > id=12인 student를 삭제하는 route: DELETE /students/12

* rest api 설계 규칙
    1. 슬래시 구분자(/ )는 계층 관계를 나타내는데 사용한다.
        Ex) http://restapi.example.com/houses/apartments
    2. URI 마지막 문자로 슬래시(/ )를 포함하지 않는다.
        URI에 포함되는 모든 글자는 리소스의 유일한 식별자로 사용되어야 하며 URI가 다르다는 것은 리소스가 다르다는 것이고, 역으로 리소스가 다르면 URI도 달라져야 한다.
        REST API는 분명한 URI를 만들어 통신을 해야 하기 때문에 혼동을 주지 않도록 URI 경로의 마지막에는 슬래시(/)를 사용하지 않는다.
        Ex) http://restapi.example.com/houses/apartments/ (X)
    3. 하이픈( - )은 URI 가독성을 높이는데 사용
        불가피하게 긴 URI경로를 사용하게 된다면 하이픈을 사용해 가독성을 높인다.
    4. *** 밑줄(_ )은 URI에 사용하지 않는다. ***
        밑줄은 보기 어렵거나 밑줄 때문에 문자가 가려지기도 하므로 가독성을 위해 밑줄은 사용하지 않는다.
        URI 경로에는 소문자가 적합하다.
    5. URI 경로에 대문자 사용은 피하도록 한다. // 구분을 위함이라면 하이픈 사용
        RFC 3986(URI 문법 형식)은 URI 스키마와 호스트를 제외하고는 대소문자를 구별하도록 규정하기 때문
    6. 파일확장자는 URI에 포함하지 않는다.
        REST API에서는 메시지 바디 내용의 포맷을 나타내기 위한 파일 확장자를 URI 안에 포함시키지 않는다.
        Accept header를 사용한다.
        Ex) http://restapi.example.com/members/soccer/345/photo.jpg (X)
        Ex) GET / members/soccer/345/photo HTTP/1.1 Host: restapi.example.com Accept: image/jpg (O)
    7. 리소스 간에는 연관 관계가 있는 경우
        /리소스명/리소스 ID/관계가 있는 다른 리소스명
        Ex) GET : /users/{userid}/devices (일반적으로 소유 ‘has’의 관계를 표현할 때)
        https://gmlwjd9405.github.io/2018/09/21/rest-and-restful.html

        id는 직접 생성하지 않고 db에서 생성해주는 프로시저나 auto increment를 사용하여 생성되기 때문
